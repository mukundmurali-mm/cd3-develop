{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CD3 Automation Toolkit Introduction What's new in this release Toolkit Supported OCI Services Excel Templates New Users Prerequisites Launch the container Connect container to OCI Tenancy Using the Automation Toolkit via CLI Before you Begin Create resources in OCI (Greenfield Workflow) Enforcing OPA (Open Policy Agent) policies for Terraform Must Read : Managing Network for Greenfield Workflow Must Read : Managing Compute Instances for Greefield Workflow Export Resources from OCI (Non-Greenfield Workflow) Must Read : Managing Network for Non-Greenfield Workflow Must Read : Managing Compute Instances for Non-Greenfield Workflow Using the Automation Toolkit via Jenkins Before you Begin Introduction to Jenkins with the toolkit Create resources in OCI via Jenkins(Greenfield Workflow) Must Read : Managing Network for Greenfield Workflow Must Read : Provisioning of Resources - Instances/OKE/SDDC/Database Must Read : Provisioning of multiple services together Export Resources from OCI via Jenkins(Non-Greenfield Workflow) Switch between CLI and Jenkins Remote Management of Terraform State File ### Existing Users Steps to Upgrade Your Toolkit Videos Automation Toolkit Learning Videos Known Behaviour Expected Behaviour Of Automation Toolkit FAQs Learn More... Grouping of generated Terraform files OCI Resource Manager Upload Additional CIS Compliance Features CD3 Validator Features Support for Additional Attributes Migrate Jenkins configuration to Customer Environment Introduction CD3 stands for C loud D eployment D esign D eliverable. The CD3 Automation toolkit has been developed to help in automating the OCI resource object management. It reads input data in the form of CD3 Excel sheet and generates Terraform files which can be used to provision the resources in OCI instead of handling the task through the OCI console manually. The toolkit also reverse engineers the components in OCI back to the Excel sheet and Terraform configuration. The toolkit can be used throughout the lifecycle of tenancy to continuously create or modify existing resources. The generated Terraform code can be used by the OCI Resource Manager or can be integrated into organization's existing devops CI/CD ecosystem. OCI Services Currently Supported by Automation Toolkit OCI Services Details IAM/Identity Compartments, Groups, Dynamic Groups, Policies, Users, Network Sources Governance Tags (Namespaces, Tag Keys, Defined Tags, Default Tags, Cost Tracking) Network VCNs, Subnets, VLANs, DRGs, IGWs, NGWs, LPGs, Route Tables, DRG Route, Tables, Security Lists, Network Security Groups, Remote Peering Connections, Application Load Balancer, Network Load Balancers DNS Management Private DNS - Views, Zones, rrsets/records and Resolvers Compute Instances supporting Market Place Images, Remote Exec, Cloud-Init scripts, Dedicated VM Hosts Storage FSS, Block and Boot Volumes, Backup Policies, Object Storage Buckets and logging for write events Database Exa Infra, ExaCS, DB Systems VM and BM, ATP, ADW Management Services Events, Notifications, Alarms, Service Connector Hub (SCH) Developer Services Resource Manager, Oracle Kubernetes Engine (OKE) Logging Services VCN Flow Logs, LBaaS access and error Logs, OSS Buckets write Logs SDDCs Oracle Cloud VMWare Solutions (Single Cluster is supported as of now. Multi-cluster support will be included in the upcoming release) CIS Landing Zone Compliance Download and Execute CIS Compliance Check Script, Cloud Guard, Key Vault, Budget Policy Enforcement OPA - Open Policy Agent Click here to get started and manage your OCI Infra! Contributing This project is open source. Please submit your contributions by raising an Issue or through Discussion topic in this repository. Currently, we do not accept any pull requests. Oracle appreciates any contributions that are made by the open source community. License Copyright (c) 2022 Oracle and/or its affiliates. Licensed under the Universal Permissive License (UPL), Version 1.0. See LICENSE for more details. ORACLE AND ITS AFFILIATES DO NOT PROVIDE ANY WARRANTY WHATSOEVER, EXPRESS OR IMPLIED, FOR ANY SOFTWARE, MATERIAL OR CONTENT OF ANY KIND CONTAINED OR PRODUCED WITHIN THIS REPOSITORY, AND IN PARTICULAR SPECIFICALLY DISCLAIM ANY AND ALL IMPLIED WARRANTIES OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE. FURTHERMORE, ORACLE AND ITS AFFILIATES DO NOT REPRESENT THAT ANY CUSTOMARY SECURITY REVIEW HAS BEEN PERFORMED WITH RESPECT TO ANY SOFTWARE, MATERIAL OR CONTENT CONTAINED OR PRODUCED WITHIN THIS REPOSITORY. IN ADDITION, AND WITHOUT LIMITING THE FOREGOING, THIRD PARTIES MAY HAVE POSTED SOFTWARE, MATERIAL OR CONTENT TO THIS REPOSITORY WITHOUT ANY REVIEW. USE AT YOUR OWN RISK.","title":"Introduction"},{"location":"#cd3-automation-toolkit","text":"Introduction What's new in this release Toolkit Supported OCI Services Excel Templates","title":"CD3 Automation Toolkit"},{"location":"#new-users","text":"Prerequisites Launch the container Connect container to OCI Tenancy","title":"New Users"},{"location":"#using-the-automation-toolkit-via-cli","text":"Before you Begin Create resources in OCI (Greenfield Workflow) Enforcing OPA (Open Policy Agent) policies for Terraform Must Read : Managing Network for Greenfield Workflow Must Read : Managing Compute Instances for Greefield Workflow Export Resources from OCI (Non-Greenfield Workflow) Must Read : Managing Network for Non-Greenfield Workflow Must Read : Managing Compute Instances for Non-Greenfield Workflow","title":"Using the Automation Toolkit via CLI"},{"location":"#using-the-automation-toolkit-via-jenkins","text":"Before you Begin Introduction to Jenkins with the toolkit Create resources in OCI via Jenkins(Greenfield Workflow) Must Read : Managing Network for Greenfield Workflow Must Read : Provisioning of Resources - Instances/OKE/SDDC/Database Must Read : Provisioning of multiple services together Export Resources from OCI via Jenkins(Non-Greenfield Workflow) Switch between CLI and Jenkins Remote Management of Terraform State File ### Existing Users Steps to Upgrade Your Toolkit","title":"Using the Automation Toolkit via Jenkins"},{"location":"#videos","text":"Automation Toolkit Learning Videos","title":"Videos"},{"location":"#known-behaviour","text":"Expected Behaviour Of Automation Toolkit FAQs","title":"Known Behaviour"},{"location":"#learn-more","text":"Grouping of generated Terraform files OCI Resource Manager Upload Additional CIS Compliance Features CD3 Validator Features Support for Additional Attributes Migrate Jenkins configuration to Customer Environment","title":"Learn More..."},{"location":"#introduction","text":"CD3 stands for C loud D eployment D esign D eliverable. The CD3 Automation toolkit has been developed to help in automating the OCI resource object management. It reads input data in the form of CD3 Excel sheet and generates Terraform files which can be used to provision the resources in OCI instead of handling the task through the OCI console manually. The toolkit also reverse engineers the components in OCI back to the Excel sheet and Terraform configuration. The toolkit can be used throughout the lifecycle of tenancy to continuously create or modify existing resources. The generated Terraform code can be used by the OCI Resource Manager or can be integrated into organization's existing devops CI/CD ecosystem.","title":"Introduction"},{"location":"#oci-services-currently-supported-by-automation-toolkit","text":"OCI Services Details IAM/Identity Compartments, Groups, Dynamic Groups, Policies, Users, Network Sources Governance Tags (Namespaces, Tag Keys, Defined Tags, Default Tags, Cost Tracking) Network VCNs, Subnets, VLANs, DRGs, IGWs, NGWs, LPGs, Route Tables, DRG Route, Tables, Security Lists, Network Security Groups, Remote Peering Connections, Application Load Balancer, Network Load Balancers DNS Management Private DNS - Views, Zones, rrsets/records and Resolvers Compute Instances supporting Market Place Images, Remote Exec, Cloud-Init scripts, Dedicated VM Hosts Storage FSS, Block and Boot Volumes, Backup Policies, Object Storage Buckets and logging for write events Database Exa Infra, ExaCS, DB Systems VM and BM, ATP, ADW Management Services Events, Notifications, Alarms, Service Connector Hub (SCH) Developer Services Resource Manager, Oracle Kubernetes Engine (OKE) Logging Services VCN Flow Logs, LBaaS access and error Logs, OSS Buckets write Logs SDDCs Oracle Cloud VMWare Solutions (Single Cluster is supported as of now. Multi-cluster support will be included in the upcoming release) CIS Landing Zone Compliance Download and Execute CIS Compliance Check Script, Cloud Guard, Key Vault, Budget Policy Enforcement OPA - Open Policy Agent Click here to get started and manage your OCI Infra!","title":"OCI Services Currently Supported by Automation Toolkit"},{"location":"#contributing","text":"This project is open source. Please submit your contributions by raising an Issue or through Discussion topic in this repository. Currently, we do not accept any pull requests. Oracle appreciates any contributions that are made by the open source community.","title":"Contributing"},{"location":"#license","text":"Copyright (c) 2022 Oracle and/or its affiliates. Licensed under the Universal Permissive License (UPL), Version 1.0. See LICENSE for more details. ORACLE AND ITS AFFILIATES DO NOT PROVIDE ANY WARRANTY WHATSOEVER, EXPRESS OR IMPLIED, FOR ANY SOFTWARE, MATERIAL OR CONTENT OF ANY KIND CONTAINED OR PRODUCED WITHIN THIS REPOSITORY, AND IN PARTICULAR SPECIFICALLY DISCLAIM ANY AND ALL IMPLIED WARRANTIES OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE. FURTHERMORE, ORACLE AND ITS AFFILIATES DO NOT REPRESENT THAT ANY CUSTOMARY SECURITY REVIEW HAS BEEN PERFORMED WITH RESPECT TO ANY SOFTWARE, MATERIAL OR CONTENT CONTAINED OR PRODUCED WITHIN THIS REPOSITORY. IN ADDITION, AND WITHOUT LIMITING THE FOREGOING, THIRD PARTIES MAY HAVE POSTED SOFTWARE, MATERIAL OR CONTENT TO THIS REPOSITORY WITHOUT ANY REVIEW. USE AT YOUR OWN RISK.","title":"License"},{"location":"CD3ExcelTabs/","text":"OCI Services currently supported by Automation Toolkit Click on the links below to know about the specifics of each tab in the excel sheet. IAM/Identity Compartments Groups Policies Users Network Sources Click here to view sample auto.tfvars for the Identity components Governance Tags Click here to view sample auto.tfvars for Governance components Network VCNs DRGs VCN Info DHCP SubnetsVLANs Click here to view sample auto.tfvars for all Network components- VCNs, Subnets, Gateways etc., Private-DNS DNS-Views-Zones-Records DNS-Resolvers Click here to view sample auto.tfvars for all DNS components Load Balancer LB-Hostname-Certs Tab LB-Backend Set and Backend Servers LB-RuleSet LB-PathRouteSet LB-Listener Click here to view sample auto.tfvars for all Load Balancer components- Cipher suits,Backend sets, rule sets etc., Compute DedicatedVMHosts Instances Click here to view sample auto.tfvars for Compute components-Virtual Machine Storage BlockVolumes Click here to view sample auto.tfvars for Block Volumes FSS Object Storage Buckets Click here to view sample auto.tfvars for Object Storage Buckets Database DBSystems-VM-BM ExaCS ADB Management Services Notifications Alarms Click here to view sample auto.tfvars for management services Alarms, Notifications, Events etc., ServiceConnectors Click here to view sample auto.tfvars for Service Connectors Developer Services OKE Click here to view sample auto.tfvars for OKE components- Clusters, Nodepools Logging Services VCN Flow Logs LBaaS Logs OSS Logs Click here to view sample auto.tfvars for Logging components SDDCs Tab OCVS Click here to view sample auto.tfvars for OCVS","title":"OCI services supported by toolkit"},{"location":"CD3ExcelTabs/#oci-services-currently-supported-by-automation-toolkit","text":"Click on the links below to know about the specifics of each tab in the excel sheet.","title":"OCI Services currently supported by Automation Toolkit"},{"location":"CD3ExcelTabs/#iamidentity","text":"Compartments Groups Policies Users Network Sources Click here to view sample auto.tfvars for the Identity components","title":"IAM/Identity"},{"location":"CD3ExcelTabs/#governance","text":"Tags Click here to view sample auto.tfvars for Governance components","title":"Governance"},{"location":"CD3ExcelTabs/#network","text":"VCNs DRGs VCN Info DHCP SubnetsVLANs Click here to view sample auto.tfvars for all Network components- VCNs, Subnets, Gateways etc.,","title":"Network"},{"location":"CD3ExcelTabs/#private-dns","text":"DNS-Views-Zones-Records DNS-Resolvers Click here to view sample auto.tfvars for all DNS components","title":"Private-DNS"},{"location":"CD3ExcelTabs/#load-balancer","text":"LB-Hostname-Certs Tab LB-Backend Set and Backend Servers LB-RuleSet LB-PathRouteSet LB-Listener Click here to view sample auto.tfvars for all Load Balancer components- Cipher suits,Backend sets, rule sets etc.,","title":"Load Balancer"},{"location":"CD3ExcelTabs/#compute","text":"DedicatedVMHosts Instances Click here to view sample auto.tfvars for Compute components-Virtual Machine","title":"Compute"},{"location":"CD3ExcelTabs/#storage","text":"BlockVolumes Click here to view sample auto.tfvars for Block Volumes FSS Object Storage Buckets Click here to view sample auto.tfvars for Object Storage Buckets","title":"Storage"},{"location":"CD3ExcelTabs/#database","text":"DBSystems-VM-BM ExaCS ADB","title":"Database"},{"location":"CD3ExcelTabs/#management-services","text":"Notifications Alarms Click here to view sample auto.tfvars for management services Alarms, Notifications, Events etc., ServiceConnectors Click here to view sample auto.tfvars for Service Connectors","title":"Management Services"},{"location":"CD3ExcelTabs/#developer-services","text":"OKE Click here to view sample auto.tfvars for OKE components- Clusters, Nodepools","title":"Developer Services"},{"location":"CD3ExcelTabs/#logging-services","text":"VCN Flow Logs LBaaS Logs OSS Logs Click here to view sample auto.tfvars for Logging components","title":"Logging Services"},{"location":"CD3ExcelTabs/#sddcs-tab","text":"OCVS Click here to view sample auto.tfvars for OCVS","title":"SDDCs Tab"},{"location":"Connect_container_to_OCI_Tenancy/","text":"Connect container to OCI Tenancy Note: It is recommended to execute createTenancyConfig.py with a single within that container. Even if it is run multiple times with different customer names, Jenkins will only be configured for used while first time successful execution of the script. If there is a new region subscription to the tenancy at a later stage of time, createTenancyConfig.py must be re-run by using the same tenancyconfig.properties file that was originally used to create the configuration. Re-execution will create new directory for the new region under /cd3user/tenancies/<customer_name>/terraform_files without touching the existing ones and will commit the latest terraform_files folder to DevOps GIT repo. Step 1 - Exec into the Container : Run docker ps . \u2192 Note down the container ID from this cmd output. Run docker exec -it <container_id> bash Step 2 - Choose Authentication Mechanism for OCI SDK Please click here to configure any one of the available authentication mechanisms. Step 3 - Edit tenancyconfig.properties : Run cd /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/ Fill the input parameters in tenancyconfig.properties file. Ensure to: Have the details ready for the Authentication mechanism you are planning to use. Use the same customer_name for a tenancy even if the script needs to be executed multiple times. Review 'outdir_structure_file' parameter as per requirements. It is recommended to use seperate outdir structure to manage a large number of resources. Review Advanced Parameters Section for CI/CD setup and be ready with user details that will be used to connect to DevOps Repo in OCI. Specifying these parameters as 'yes' in properties file will create Object Storage Bucket and Devops Git Repo/Project/Topic in OCI and enable toolkit usage via Jenkins. The toolkit supports users in primary IDCS stripes or default domains only for DevOps GIT operations. Step 4 - Initialise the environment : Initialise your environment to use the Automation Toolkit. python createTenancyConfig.py tenancyconfig.properties Note * If you are running docker container on a linux VM host, please refer to point no. 7 under FAQ to avoid any permission issues. * Running the above command immediately after adding API key to the user profile in OCI might result in Authentication Errors. In such cases, please retry after a minute. \u2192 Example execution of the script with Advanced Parameters for CI/CD: Appendix Expand this to view the details of the files created on successful execution of above steps | Files Generated | At File Path | Comment/Purpose | | --------------- | ------------ | --------------- | | setUpOCI.properties | ```/cd3user/tenancies/ / _setUpOCI.properties``` | Customer Specific properties | | outdir_structure_file.properties | ```/cd3user/tenancies/ / _outdir_structure_file``` | Customer Specific properties file for outdir structure. This file will not be generated if 'outdir_structure_file' parameter was set to empty(single outdir) in tenancyconfig.properties while running createTenancyConfig.py | | Region based directories | ```/cd3user/tenancies/ /terraform_files``` | Tenancy's subscribed regions based directories for the generation of terraform files. Each region directory will contain individual directory for each service based on the parameter 'outdir_structure_file' | | Variables File,Provider File, Root and Sub terraform modules | ```/cd3user/tenancies/ /terraform_files/ ``` | Required for terraform to work. Variables file and Provider file will be genrated based on authentication mechanism chosen.| | out file | ```/cd3user/tenancies/ /createTenancyConfig.out``` | This file contains a copy of information displayed as the console output. | | OCI Config File | ```/cd3user/tenancies/ /.config_files/ _oci_config``` | Customer specific Config file for OCI API calls. This will have data based on authentication mechanism chosen. | | Public and Private Key Pair | Copied from ```/cd3user/tenancies/keys/``` to ```/cd3user/tenancies/ /.config_files``` | API Key for authentication mechanism as API_Key are copied to customer specific out directory locations for easy access. | | GIT Config File | ```/cd3user/tenancies/ /.config_files/ _git_config``` | Customer specific GIT Config file for OCI Dev Ops GIT operations. This is generated only if use_oci_devops_git is set to yes | | S3 Credentials File | ```/cd3user/tenancies/ /.config_files/ _s3_credentials``` | This file contains access key and secret for S3 compatible OS bucket to manage remote terraform state. This is generated only if use_remote_state is set to yes | | Jenkins Home | ```/cd3user/tenancies/jenkins_home``` | This folder contains jenkins specific data. ```Single Jenkins instance can be setup for a single container.```| | tenancyconfig.properties | ```/cd3user/tenancies/ /.config_files/ _tenancyconfig.properties``` | The input properties file used to execute the script is copied to custome folder to retain for future reference. This can be used when the script needs to be re-run with same parameters at later stage.| The next pages will guide you to use the toolkit either via CLI or via Jenkins. Please proceed further. | :arrow_backward: Prev | Automation Toolkit via CLI :arrow_forward: | Automation Toolkit via Jenkins :arrow_forward: | | :---- | -------: |-------: |","title":"Connect container to OCI tenancy"},{"location":"Connect_container_to_OCI_Tenancy/#connect-container-to-oci-tenancy","text":"Note: It is recommended to execute createTenancyConfig.py with a single within that container. Even if it is run multiple times with different customer names, Jenkins will only be configured for used while first time successful execution of the script. If there is a new region subscription to the tenancy at a later stage of time, createTenancyConfig.py must be re-run by using the same tenancyconfig.properties file that was originally used to create the configuration. Re-execution will create new directory for the new region under /cd3user/tenancies/<customer_name>/terraform_files without touching the existing ones and will commit the latest terraform_files folder to DevOps GIT repo.","title":"Connect container to OCI Tenancy"},{"location":"Connect_container_to_OCI_Tenancy/#step-1-exec-into-the-container","text":"Run docker ps . \u2192 Note down the container ID from this cmd output. Run docker exec -it <container_id> bash","title":"Step 1 - Exec into the Container:"},{"location":"Connect_container_to_OCI_Tenancy/#step-2-choose-authentication-mechanism-for-oci-sdk","text":"Please click here to configure any one of the available authentication mechanisms.","title":"Step 2 - Choose Authentication Mechanism for OCI SDK"},{"location":"Connect_container_to_OCI_Tenancy/#step-3-edit-tenancyconfigproperties","text":"Run cd /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/ Fill the input parameters in tenancyconfig.properties file. Ensure to: Have the details ready for the Authentication mechanism you are planning to use. Use the same customer_name for a tenancy even if the script needs to be executed multiple times. Review 'outdir_structure_file' parameter as per requirements. It is recommended to use seperate outdir structure to manage a large number of resources. Review Advanced Parameters Section for CI/CD setup and be ready with user details that will be used to connect to DevOps Repo in OCI. Specifying these parameters as 'yes' in properties file will create Object Storage Bucket and Devops Git Repo/Project/Topic in OCI and enable toolkit usage via Jenkins. The toolkit supports users in primary IDCS stripes or default domains only for DevOps GIT operations.","title":"Step 3 - Edit tenancyconfig.properties:"},{"location":"Connect_container_to_OCI_Tenancy/#step-4-initialise-the-environment","text":"Initialise your environment to use the Automation Toolkit. python createTenancyConfig.py tenancyconfig.properties Note * If you are running docker container on a linux VM host, please refer to point no. 7 under FAQ to avoid any permission issues. * Running the above command immediately after adding API key to the user profile in OCI might result in Authentication Errors. In such cases, please retry after a minute. \u2192 Example execution of the script with Advanced Parameters for CI/CD:","title":"Step 4 - Initialise the environment:"},{"location":"Connect_container_to_OCI_Tenancy/#appendix","text":"Expand this to view the details of the files created on successful execution of above steps | Files Generated | At File Path | Comment/Purpose | | --------------- | ------------ | --------------- | | setUpOCI.properties | ```/cd3user/tenancies/ / _setUpOCI.properties``` | Customer Specific properties | | outdir_structure_file.properties | ```/cd3user/tenancies/ / _outdir_structure_file``` | Customer Specific properties file for outdir structure. This file will not be generated if 'outdir_structure_file' parameter was set to empty(single outdir) in tenancyconfig.properties while running createTenancyConfig.py | | Region based directories | ```/cd3user/tenancies/ /terraform_files``` | Tenancy's subscribed regions based directories for the generation of terraform files. Each region directory will contain individual directory for each service based on the parameter 'outdir_structure_file' | | Variables File,Provider File, Root and Sub terraform modules | ```/cd3user/tenancies/ /terraform_files/ ``` | Required for terraform to work. Variables file and Provider file will be genrated based on authentication mechanism chosen.| | out file | ```/cd3user/tenancies/ /createTenancyConfig.out``` | This file contains a copy of information displayed as the console output. | | OCI Config File | ```/cd3user/tenancies/ /.config_files/ _oci_config``` | Customer specific Config file for OCI API calls. This will have data based on authentication mechanism chosen. | | Public and Private Key Pair | Copied from ```/cd3user/tenancies/keys/``` to ```/cd3user/tenancies/ /.config_files``` | API Key for authentication mechanism as API_Key are copied to customer specific out directory locations for easy access. | | GIT Config File | ```/cd3user/tenancies/ /.config_files/ _git_config``` | Customer specific GIT Config file for OCI Dev Ops GIT operations. This is generated only if use_oci_devops_git is set to yes | | S3 Credentials File | ```/cd3user/tenancies/ /.config_files/ _s3_credentials``` | This file contains access key and secret for S3 compatible OS bucket to manage remote terraform state. This is generated only if use_remote_state is set to yes | | Jenkins Home | ```/cd3user/tenancies/jenkins_home``` | This folder contains jenkins specific data. ```Single Jenkins instance can be setup for a single container.```| | tenancyconfig.properties | ```/cd3user/tenancies/ /.config_files/ _tenancyconfig.properties``` | The input properties file used to execute the script is copied to custome folder to retain for future reference. This can be used when the script needs to be re-run with same parameters at later stage.| The next pages will guide you to use the toolkit either via CLI or via Jenkins. Please proceed further. | :arrow_backward: Prev | Automation Toolkit via CLI :arrow_forward: | Automation Toolkit via Jenkins :arrow_forward: | | :---- | -------: |-------: |","title":"Appendix"},{"location":"ExcelTemplates/","text":"Excel Sheet Templates CD3 Excel sheet is the main input for Automation Toolkit. Below are the CD3 templates for the latest release having standardised IAM Components (compartments, groups and policies), Network Components and Events & Notifications Rules as per CIS Foundations Benchmark for Oracle Cloud. Details on how to fill data into the Excel sheet can be found in the Blue section of each sheet inside the Excel file. Make appropriate changes to the templates eg region and use for deployment. CD3 Excel templates for OCI core services: Excel Sheet Purpose CD3-Blank-template.xlsx Choose this template while exporting the existing resources from OCI into the CD3 and Terraform. CD3-CIS-template.xlsx This template has auto-filled in data of CIS Landing Zone for DRGv2. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3-HubSpoke-template This template has auto-filled in data for a Hub and Spoke model of networking. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3-SingleVCN-template This template has auto-filled in data for a Single VCN model of networking. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3 Excel template for OCI Management services: Excel Sheet Purpose CD3-CIS-ManagementServices-template.xlsx This template has auto-filled in data of CIS Landing Zone. Choose this template while creating the components of Events, Alarms, Notifications and Service Connectors The Excel Templates can also be found at /cd3user/oci_tools/cd3_automation_toolkit/example inside the container. After deploying the infra using any of the templates, please run CIS compliance checker script )","title":"Excel Templates"},{"location":"ExcelTemplates/#excel-sheet-templates","text":"CD3 Excel sheet is the main input for Automation Toolkit. Below are the CD3 templates for the latest release having standardised IAM Components (compartments, groups and policies), Network Components and Events & Notifications Rules as per CIS Foundations Benchmark for Oracle Cloud. Details on how to fill data into the Excel sheet can be found in the Blue section of each sheet inside the Excel file. Make appropriate changes to the templates eg region and use for deployment. CD3 Excel templates for OCI core services: Excel Sheet Purpose CD3-Blank-template.xlsx Choose this template while exporting the existing resources from OCI into the CD3 and Terraform. CD3-CIS-template.xlsx This template has auto-filled in data of CIS Landing Zone for DRGv2. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3-HubSpoke-template This template has auto-filled in data for a Hub and Spoke model of networking. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3-SingleVCN-template This template has auto-filled in data for a Single VCN model of networking. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3 Excel template for OCI Management services: Excel Sheet Purpose CD3-CIS-ManagementServices-template.xlsx This template has auto-filled in data of CIS Landing Zone. Choose this template while creating the components of Events, Alarms, Notifications and Service Connectors The Excel Templates can also be found at /cd3user/oci_tools/cd3_automation_toolkit/example inside the container. After deploying the infra using any of the templates, please run CIS compliance checker script )","title":"Excel Sheet Templates"},{"location":"GreenField/","text":"Create resources in OCI (Greenfield Workflow) Step 1 : Choose the appropriate Excel sheet template from Excel Templates Step 2 : Fill the Excel with appropriate values and put at the appropriate location. Modify/Review /cd3user/tenancies/ / _setUpOCI.properties with workflow_type set to create_resources as shown below: #Input variables required to run setUpOCI script #path to output directory where terraform file will be generated. eg /cd3user/tenancies/<customer_name>/terraform_files outdir=/cd3user/tenancies/demotenancy/terraform_files/ #prefix for output terraform files eg <customer_name> like demotenancy prefix=demotenancy # auth mechanism for OCI APIs - api_key,instance_principal,session_token auth_mechanism=api_key #input config file for Python API communication with OCI eg /cd3user/tenancies/<customer_name>/.config_files/<customer_name>_config; config_file=/cd3user/tenancies/demotenancy/.config_files/demotenancy_oci_config # Leave it blank if you want single outdir or specify outdir_structure_file.properties containing directory structure for OCI services. outdir_structure_file=/cd3user/tenancies/demotenancy/demotenancy_outdir_structure_file.properties #path to cd3 excel eg /cd3user/tenancies/<customer_name>/CD3-Customer.xlsx cd3file=/cd3user/tenancies/demotenancy/CD3-Blank-template.xlsx #specify create_resources to create new resources in OCI(greenfield workflow) #specify export_resources to export resources from OCI(non-greenfield workflow) workflow_type=create_resources Step 3 : Execute the SetUpOCI.py script to start creating the terraform configuration files. Command to Execute: cd /cd3user/oci_tools/cd3_automation_toolkit/ python setUpOCI.py ie python setUpOCI.py /cd3user/tenancies/<customer_name>/<customer_name>_setUpOCI.properties \u2192 Example execution of the wrapper script: Choose the resources by specifying a single option (for choosing one of these resources) or comma-separated values (to choose multiple resources) as shown in the sample screenshot above. Step 4: Change your directory to /cd3user/tenancies/ /terraform_files/ / and Execute: terraform init - To initialize and prepare your working/out directory soTerraform can run the configuration. terraform plan - To preview any changes before you apply them. Run the plan against OPA policies for compliance against CIS. terraform apply - To make the changes defined by Terraform configuration to create, update, or destroy resources in OCI. Note Execute \"Fetch Compartments OCIDs to variables file\" from CD3 Services in setUpOCI menu after you create Compartments. This is a required step everytime you create a compartment via toolkit or via the OCI console. ## Example - Create a Compartment Follow the below steps to quickly provision a compartment on OCI. Use the excel CD3-SingleVCN-template and fill the required Compartment details in the 'Compartments' tab. Make appropriate changes to the template. For Eg: Update the Region value to your tenancy's home region. Once all the required data is filled in the Excel sheet, place it at the location /cd3user/tenancies/ / which is also mapped to your local directory. Edit the setUpOCI.properties at location: /cd3user/tenancies / / _setUpOCI.properties with appropriate values. Update the cd3file parameter to specify the CD3 excel sheet path. Set the workflow_type parameter value to create_resources . (for Greenfield Workflow.) Change Directory to 'cd3_automation_toolkit' : cd /cd3user/oci_tools/cd3_automation_toolkit/ and execute the setupOCI.py file: python setUpOCI.py /cd3user/tenancies/<customer_name>/<customer_name>_setUpOCI.properties Choose option to create compartments under 'Identity' from the displayed menu. Once the execution is successful, _compartments.auto.tfvars file will be generated under the folder /cd3user/tenancies/ /terraform_files/ / Navigate to the above path and execute the terraform commands: terraform init terraform plan terraform apply Choose Fetch Compartments OCIDs to variables file under CD3 Services in setUpOCI menu. Execute the command to fetch the details of the compartments if it already exists/ created in OCI. These details will be written to the terraform variables file. Repeat the above process (except Step 5) to create other components in OCI. | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Create resources in OCI (Greenfield Workflow)"},{"location":"GreenField/#create-resources-in-oci-greenfield-workflow","text":"Step 1 : Choose the appropriate Excel sheet template from Excel Templates Step 2 : Fill the Excel with appropriate values and put at the appropriate location. Modify/Review /cd3user/tenancies/ / _setUpOCI.properties with workflow_type set to create_resources as shown below: #Input variables required to run setUpOCI script #path to output directory where terraform file will be generated. eg /cd3user/tenancies/<customer_name>/terraform_files outdir=/cd3user/tenancies/demotenancy/terraform_files/ #prefix for output terraform files eg <customer_name> like demotenancy prefix=demotenancy # auth mechanism for OCI APIs - api_key,instance_principal,session_token auth_mechanism=api_key #input config file for Python API communication with OCI eg /cd3user/tenancies/<customer_name>/.config_files/<customer_name>_config; config_file=/cd3user/tenancies/demotenancy/.config_files/demotenancy_oci_config # Leave it blank if you want single outdir or specify outdir_structure_file.properties containing directory structure for OCI services. outdir_structure_file=/cd3user/tenancies/demotenancy/demotenancy_outdir_structure_file.properties #path to cd3 excel eg /cd3user/tenancies/<customer_name>/CD3-Customer.xlsx cd3file=/cd3user/tenancies/demotenancy/CD3-Blank-template.xlsx #specify create_resources to create new resources in OCI(greenfield workflow) #specify export_resources to export resources from OCI(non-greenfield workflow) workflow_type=create_resources Step 3 : Execute the SetUpOCI.py script to start creating the terraform configuration files. Command to Execute: cd /cd3user/oci_tools/cd3_automation_toolkit/ python setUpOCI.py ie python setUpOCI.py /cd3user/tenancies/<customer_name>/<customer_name>_setUpOCI.properties \u2192 Example execution of the wrapper script: Choose the resources by specifying a single option (for choosing one of these resources) or comma-separated values (to choose multiple resources) as shown in the sample screenshot above. Step 4: Change your directory to /cd3user/tenancies/ /terraform_files/ / and Execute: terraform init - To initialize and prepare your working/out directory soTerraform can run the configuration. terraform plan - To preview any changes before you apply them. Run the plan against OPA policies for compliance against CIS. terraform apply - To make the changes defined by Terraform configuration to create, update, or destroy resources in OCI. Note Execute \"Fetch Compartments OCIDs to variables file\" from CD3 Services in setUpOCI menu after you create Compartments. This is a required step everytime you create a compartment via toolkit or via the OCI console. ## Example - Create a Compartment Follow the below steps to quickly provision a compartment on OCI. Use the excel CD3-SingleVCN-template and fill the required Compartment details in the 'Compartments' tab. Make appropriate changes to the template. For Eg: Update the Region value to your tenancy's home region. Once all the required data is filled in the Excel sheet, place it at the location /cd3user/tenancies/ / which is also mapped to your local directory. Edit the setUpOCI.properties at location: /cd3user/tenancies / / _setUpOCI.properties with appropriate values. Update the cd3file parameter to specify the CD3 excel sheet path. Set the workflow_type parameter value to create_resources . (for Greenfield Workflow.) Change Directory to 'cd3_automation_toolkit' : cd /cd3user/oci_tools/cd3_automation_toolkit/ and execute the setupOCI.py file: python setUpOCI.py /cd3user/tenancies/<customer_name>/<customer_name>_setUpOCI.properties Choose option to create compartments under 'Identity' from the displayed menu. Once the execution is successful, _compartments.auto.tfvars file will be generated under the folder /cd3user/tenancies/ /terraform_files/ / Navigate to the above path and execute the terraform commands: terraform init terraform plan terraform apply Choose Fetch Compartments OCIDs to variables file under CD3 Services in setUpOCI menu. Execute the command to fetch the details of the compartments if it already exists/ created in OCI. These details will be written to the terraform variables file. Repeat the above process (except Step 5) to create other components in OCI. | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Create resources in OCI (Greenfield Workflow)"},{"location":"Launch_Docker_container/","text":"Launch the Container To ease the execution of toolkit, we have provided the steps to build an image which encloses the code base and its package dependencies. Follow the steps provided below to clone the repo, build the image and finally launch the container. Clone the repo Open your terminal and navigate to the directory where you plan to download the Git repo. Run the git clone command as shown below: git clone https://github.com/oracle-devrel/cd3-automation-toolkit Once the cloning command is executed successfully, the repo will replicate to the local directory. Build an image Change directory to 'cd3-automation-toolkit'(i.e. the cloned repo in your local). Run docker build --platform linux/amd64 -t cd3toolkit:${image_tag} -f Dockerfile --pull --no-cache . Note : ${image_tag} should be replaced with suitable tag as per your requirements/standards. eg v2024.1.0 The period (.) at the end of the docker build command is required. Save the image (Optional) Run docker save cd3toolkit:${image_tag} | gzip > cd3toolkit_${image_tag}.tar.gz Run the container alongwith VPN (Applicable for VPN users only) Connect to the VPN. Make sure you are using version 1.9 for Rancher deskop , if not please install the latest. Make sure to Enable Networking Tunnel under Rancher settings as shown in the screenshot below, Login to the CD3 docker container using next section and set the proxies(if any) which helps to connect internet from the container. Run the container Run docker run --platform linux/amd64 -it -p <port_number_in_local_system>:8443 -d -v <directory_in_local_system_where_the_files_must_be_generated>:/cd3user/tenancies <image_name>:<image_tag> Eg for Mac: docker run --platform linux/amd64 -it -p 8443:8443 -d -v /Users/<user_name>/mount_path:/cd3user/tenancies cd3toolkit:v2024.1.0 Eg for Windows: docker run --platform linux/amd64 -it -p 8443:8443 -d -v D:/mount_path:/cd3user/tenancies cd3toolkit:v2024.1.0 If you are launching the container on cloud, Please make sure to use a private server or a bastion connected server with restricted access(i.e. not publicly available) to host the container. Run docker ps | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Launch the container"},{"location":"Launch_Docker_container/#launch-the-container","text":"To ease the execution of toolkit, we have provided the steps to build an image which encloses the code base and its package dependencies. Follow the steps provided below to clone the repo, build the image and finally launch the container.","title":"Launch the Container"},{"location":"Launch_Docker_container/#clone-the-repo","text":"Open your terminal and navigate to the directory where you plan to download the Git repo. Run the git clone command as shown below: git clone https://github.com/oracle-devrel/cd3-automation-toolkit Once the cloning command is executed successfully, the repo will replicate to the local directory.","title":"Clone the repo"},{"location":"Launch_Docker_container/#build-an-image","text":"Change directory to 'cd3-automation-toolkit'(i.e. the cloned repo in your local). Run docker build --platform linux/amd64 -t cd3toolkit:${image_tag} -f Dockerfile --pull --no-cache . Note : ${image_tag} should be replaced with suitable tag as per your requirements/standards. eg v2024.1.0 The period (.) at the end of the docker build command is required.","title":"Build an image"},{"location":"Launch_Docker_container/#save-the-image-optional","text":"Run docker save cd3toolkit:${image_tag} | gzip > cd3toolkit_${image_tag}.tar.gz","title":"Save the image (Optional)"},{"location":"Launch_Docker_container/#run-the-container-alongwith-vpn-applicable-for-vpn-users-only","text":"Connect to the VPN. Make sure you are using version 1.9 for Rancher deskop , if not please install the latest. Make sure to Enable Networking Tunnel under Rancher settings as shown in the screenshot below, Login to the CD3 docker container using next section and set the proxies(if any) which helps to connect internet from the container.","title":"Run the container alongwith VPN (Applicable for VPN users only)"},{"location":"Launch_Docker_container/#run-the-container","text":"Run docker run --platform linux/amd64 -it -p <port_number_in_local_system>:8443 -d -v <directory_in_local_system_where_the_files_must_be_generated>:/cd3user/tenancies <image_name>:<image_tag> Eg for Mac: docker run --platform linux/amd64 -it -p 8443:8443 -d -v /Users/<user_name>/mount_path:/cd3user/tenancies cd3toolkit:v2024.1.0 Eg for Windows: docker run --platform linux/amd64 -it -p 8443:8443 -d -v D:/mount_path:/cd3user/tenancies cd3toolkit:v2024.1.0 If you are launching the container on cloud, Please make sure to use a private server or a bastion connected server with restricted access(i.e. not publicly available) to host the container. Run docker ps | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Run the container"},{"location":"OPAForCompliance/","text":"Open Policy Agent for Terraform: OPA is a powerful policy-as-code framework that enables you to define and enforce policies across your infrastructure-as-code (IaC) deployments. With OPA, you can seamlessly integrate policy checks into your Terraform workflows, ensuring that your infrastructure deployments adhere to your organization's security, compliance, and operational requirements. By leveraging OPA for Terraform, you can automate policy enforcement, eliminate manual checks, and enforce best practices consistently across your infrastructure-as-code projects. With OPA, you gain enhanced visibility and control over your Terraform deployments, reducing the risk of misconfigurations, security vulnerabilities, and compliance issues. As part of CD3, we have meticulously developed a comprehensive set of policies that strictly adhere to the CIS benchmarks. These policies serve as your shield, ensuring that any Infrastructure-as-Code (IAC) deployments made for Oracle Cloud Infrastructure (OCI) meet the highest security and compliance standards. Our carefully crafted policies act as gatekeepers, preventing any IAC deployments that do not align with the stringent security and compliance guidelines set by the CIS benchmarks for OCI. By leveraging our policies, you can ensure that your infrastructure deployments remain impervious to any potential vulnerabilities or non-compliance issues. Run OPA inside CD3 container Open your command line interface inside CD3 container and run OPA. You should see all available options for OPA. opa --help Currently CD3 container has OPA version 0.55.0 installed. Generate the terraform plan output in json format since OPA accepts that format alone for evaluation. terraform plan -out tfplan.binary terraform show -json tfplan.binary > tfplan.json Run the terraform plan against all the available OPA rules. It should return an empty array which means the plan has no non-compliant action against CIS benchmarks. opa eval -f pretty -b /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/OPA -i tfplan.json data.terraform.deny --fail-defined Alternatively, run the following command to evaluate just a sinle OPA rule say \"deny_ingress_for_sl.rego\" policy with a pretty output format: opa eval -f pretty -d /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/OPA/Networking/oci_deny_ingress_for_sl.rego -i tfplan.json data.terraform.deny This command will analyze the \"tfplan.json\" input file against the policy and display the evaluation results with a user-friendly format. | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Enforcing OPA (Open Policy Agent) policies for Terraform"},{"location":"OPAForCompliance/#open-policy-agent-for-terraform","text":"OPA is a powerful policy-as-code framework that enables you to define and enforce policies across your infrastructure-as-code (IaC) deployments. With OPA, you can seamlessly integrate policy checks into your Terraform workflows, ensuring that your infrastructure deployments adhere to your organization's security, compliance, and operational requirements. By leveraging OPA for Terraform, you can automate policy enforcement, eliminate manual checks, and enforce best practices consistently across your infrastructure-as-code projects. With OPA, you gain enhanced visibility and control over your Terraform deployments, reducing the risk of misconfigurations, security vulnerabilities, and compliance issues. As part of CD3, we have meticulously developed a comprehensive set of policies that strictly adhere to the CIS benchmarks. These policies serve as your shield, ensuring that any Infrastructure-as-Code (IAC) deployments made for Oracle Cloud Infrastructure (OCI) meet the highest security and compliance standards. Our carefully crafted policies act as gatekeepers, preventing any IAC deployments that do not align with the stringent security and compliance guidelines set by the CIS benchmarks for OCI. By leveraging our policies, you can ensure that your infrastructure deployments remain impervious to any potential vulnerabilities or non-compliance issues.","title":"Open Policy Agent for Terraform:"},{"location":"OPAForCompliance/#run-opa-inside-cd3-container","text":"Open your command line interface inside CD3 container and run OPA. You should see all available options for OPA. opa --help Currently CD3 container has OPA version 0.55.0 installed. Generate the terraform plan output in json format since OPA accepts that format alone for evaluation. terraform plan -out tfplan.binary terraform show -json tfplan.binary > tfplan.json Run the terraform plan against all the available OPA rules. It should return an empty array which means the plan has no non-compliant action against CIS benchmarks. opa eval -f pretty -b /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/OPA -i tfplan.json data.terraform.deny --fail-defined Alternatively, run the following command to evaluate just a sinle OPA rule say \"deny_ingress_for_sl.rego\" policy with a pretty output format: opa eval -f pretty -d /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/OPA/Networking/oci_deny_ingress_for_sl.rego -i tfplan.json data.terraform.deny This command will analyze the \"tfplan.json\" input file against the policy and display the evaluation results with a user-friendly format. | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Run OPA inside CD3 container"},{"location":"ReleaseInfo/","text":"Release-Info Automation Toolkit Release v10 & Docker Image Release v6.0 Date - Jan 13th, 2023 This is a major release with below updates: Support for new services - OKE and SCH. New tab for 'OKE' is included in CD3-CIS-template.xlsx. New tab for 'ServiceConnectors' is added to CD3-CIS-ManagementServices-template.xlsx. Added the script to fetch regions subscribed to the tenancy. This will be executed automatically every time setUpOCI is executed. Introduced a new option in setUpOCI menu called 'CD3 Services' to execute 'Fetch Compartments' and 'Fetch Protocols Scripts. Modified the setUpOCI workflow to prompt the user to execute 'Fetch Compartments' script in case it has not been executed previously. Bug fixes wrt Instances, DB Systems Automation Toolkit Release v9.2.1 & Docker Image Release v5.2.1 Date - Nov 30th, 2022 This is a minor release with below updates: Sample terraform import command included as part of output tfvars file for each OCI resource managed by Toolkit. Split Export of Network options to chose export of different components separately eg Major Objects, Subnets, NSGs etc. Include support for Marketplace Images for Instances. Few bug fixes/enhancements wrt export of Instances/NSGs, making null values for NSGs/Instances optional in tfvars Previous Versions released before making it available on GitHub Automation Toolkit Release v9.2 & Docker Image Release v5.2 Date - Oct 10th, 2022 This is a major release with existing services converted into terraform modules and also bug fixes. Terraform modules for FSS and ADB(Modified the input sheet for ADB to include more features) Included new service - Network Load Balancers Enhanced Tags sheet to include Default Tags for Multiple Compartments. Enhanced CD3 Validator for FSS, NSGs column for each tab. Included CIS compliance checker script as part of setUpOCI Menu option Cleanup of variables_ .tf file Updated CD3 templates in example folder with latest CIS data Bug fixes wrt multiple services like Instances, Notifications etc Introduced documentation folder containing terraform and toolkit user guide in outdir of each customer Automation Toolkit Release v9.1 & Docker Image Release v5.1 Date - Jun 13th, 2022 This is a major release with existing services converted into terraform modules and also bug fixes. Terraform Modules for Instances, Block Volumes, Tags, CIS features, LBaas. Introduced new columns for PV encryption in Instances/Block Volumes. Introduced new columns for Min/Max bandwidth for flexible shapes load balancers, reserved public IP. Support for OCI certificate management certificates for Listeners, BackendSets. Removed support for subnet_name_attach_cidr parameter from CD3 excel's 'VCN Info' sheet. Bug fixes Automation Toolkit Release v9.0.2 & Docker Image Release v5.0.2 Date - April 29, 2022 This is a minor release with bug fixes related to Networking and Identity Policies. Automation Toolkit Release v9.0.1 & Docker Image Release v5.0.1 Date - April 9, 2022 This is a minor release. Bug fix for data after END tag in DRGRouteRulesinOCI sheet. Bug fix for tenancies having both DRGv1 and DRGv2 Bug fix for VCN Flow Log output Bug fix for NSG ICMP rules not having only ICMP type Modified output template files to adjust the spacing Automation Toolkit Release v9.0 & Docker Image Release v5.0 Date - March 21, 2022 This is a major release. Terraform output files in modules format for IAM, Network, Database(DBSystems and Exa) and Management Services(Events, Notifications) components. Added support for Alarms with output files as terraform modules. Updated the excel sheet templates as per latest CIS compliance for IAM compartments, groups, policies, events, notifications and alarms. Added support for multiple VCN CIDRs in VCNs sheet. Added support for same VCN names across regions. Added export for Dedicated VM Hosts and Database tabs as terraform flat files Modified Database tabs to include new features. Restructured the code directories and setUpOCI menu options. Added drop downs in the excel sheet columns to make excel filling easier. Updated OCI_regions to include all regions Deprecation of OCSWorkVM. Automation Toolkit Release v8.0.3 & Docker Image Release v4.0.3 Date - Nov 26 , 2021 This is a minor release. Bug fix for Availability Domain values while export of block volumes, FSS Bug fix for DRG Route Rules export error - 'Too Many requests' Bug fix for export of Tags having spaces in the values Automation Toolkit Release v8.0.2 & Docker Image Release v4.0.2 Date - Sep 30 , 2021 This is a minor release. Bug fix for End Tag in NSGs tab Bug fix for export of LBR hosted in two subnets in different compartments. Bug fix for terraform variable name for route table names Allow case insensitive for Security Rule Types/Protocols Allow flexible shapes in LBR CD3 Automation Toolkit Release v8.0 & Docker Image Release v4.0 Date - Jul 27 , 2021 This is a major release. Support for DRGv2 - added 2 new sheets to CD3: DRGs and DRGRouteRulesinOCI Backward compatible to support DRGv1 Updated CD3 Validator to include validation for DRGs tab Optimized the code for export of objects Bug fix for export of SecRules and RouteRules for all compartments Updated the toolkit to support user access to a single compartment by allowing creation of sub-compartments under that only. Included export of additional objects for Instances and Block Volumes CD3 templates are compliant to latest CIS Landing Zone Upgrade terraform version to 1.0.0 Please note that since this release is upgrading the terraform version so previous version's terraform state will not be compatible with the new tf files. Recommendation is to keep using old code setup for eixsting customers and new code setup for new customers. Or else export everything using new code and then import into the new terraform state Automation Toolkit Release v7.2 & Docker Image Release v3.2 Date - May 26, 2021 This is a minor release. Bug fix for export of policies having newline in description eg for policies added automatically for streaming Launch Linux 7.9 as OCS VM since 7.8 is not searcheable now and enable yum repos Change os.cmd to function calls for SetUPOCI Include CIS Features to enable cloud-guard, OSS, VCN Flow Logging CD3 Validator for Identity, Networking, Instances, Block Volumes Accept key value along with key var name in Instances Sheet Updated CD3 Templates as per CIS Release v7.1.2 Date - Apr 12, 2021 This is a minor release. Bug fix for CD3 LBR - Certs/PEM keys copied to outdir- this helps to resolve the path issue while RM upload. Export LBR also modified Bug fix for Instance Export - included root compartment, AD issue and Boot Volume not found issue. Removed installation of Development Tools from shell script on OCSVM. Added CD3 validation for DNS Label length for VCN and Subnets Release v7.1.1 This is a minor release. Bug fix for CD3 Network components validator - included check for invalid CIDR range having host bits set Bug fix for Security List Rules - allow all ports for TCP/UDP Removed unwanted packages from shell script - cfgparse, ipaddr, pycrypto, gcc Release v7.1 Date - Feb 12, 2021 Below are the highlights of this release: Introduced new option in setUpOCI Menu to create RM Stack * When this option is chosen, it will ask for the compartment where the RM stack has to be created. * It will create stacks in the specified compartment in the home region * RM Stack names: ocswork- - where is the prefix mentioned in setUpOCI.properties file and is the regions tenancy is subscribed to. * Uploads all files in outdir to RM Stack and also uploads the tfstate file if existing. * Uses same RM Stack for multiple executions. Bug fix for LBR Backend sets to allow same backend servers with different ports. OCSWork VM launched with TF version 0.13.4 in sync with Resource Manager in OCI CD3 templates as per CIS Standards Release v7.0.1 This is a minor release. xrld package's latest release was not compatible and giving below issue with CD3: It has been fixed by installing lower version of xlrd package. pip3 install xlrd==1.2.0 It has been corrected and pushed to the master branch. Major Release v7.0 Date - Oct 9, 2020 Support for additional properties for OCI objects using Jinja2 templates Support for configuring Events and Notifications Support for export of Instances, block volumes, Tags, Events and Notifications etc to CD3 Updated Terraform Configuration Files to support the Latest Terraform Version Support for Resource Manager Support to create and export Dynamic Groups Support to create and export Cost Tracking and Default Tags Support to create and export LBR Components- Cipher Suites, Rule Set and Path Route Set Support to attach or export 'Custom Backup Policy Attachments' to Block and Boot Volumes Release v6.1.1 creatOCSWork.py picks up latest Linux OCID and launches the OCSWork VM. However Linux 8 does not support many packages required by automation toolkit. Hence modified the code to launch Linux 7.8 incase ocs_vm_source_image_ocid is left empty in ocswork.properties. Release v6.1 Date - July 31, 2020 Below are the highlights of this release: Addition of Description field for Security Rules and Route Rules. Keep using same CD3 but just add new column 'RuleDescription' at the end of both the sheets - SecRulesinOCI and RouteRulesinOCI New text files - OCI_Regions and OCI_Protocols have been introduced. If any new region gets supported by OCI, it can be added in OCI_Regions file. Similarly Protocol and its number mapping has been defined in OCI_Protocols file which will be used by Security Rules as well as NSG Rules. Automation Toolkit will now support duplicate compartment names like OCI does. Please refer to CD3-template.xlsx under example folder for sample data. Extra properties specific to OCItoOCI project have been removed from ocswork.properties and a new file ocswork_ocic.properties has been added to accomodate that. Support for multiple OCSWork VMs via separate config_for_delete files. A new input parameter has been added to ocswork.properties file. Support for Reserved Public IP for OCSWork VM. Reserved public IP will be assigned to OCSWork VM which you cna chose to retain also while destroying OCSWork VM. a. Regions property has been removed and now tenancy's subscribed regions will be fetched using API and terraform directories would be created based on that. It would be good to subscribe tenancy to all required regions before setting up OCS Work VM or else create the region directory manually. b. Regions property has been removed from VCN Info tab of CD3 as well. CD3 Validator has been introduced. This will validate Networking tabs as of now. It will check for any Null Values, CIDR overlaps etc. Support for Flex shapes for Instances. Please refer to CD3-template.xlsx under example folder for sample input data. Instead of LinuxLatest and WindowsLatest, OS value in CD3 template has been changed to Linux and Windows respectively. Variable names in variables_ .tf has been changed accordingly. Support for LinuxLatest and WindowsLatest templates for instance will be deprecated from next release. Support for Multiple Listeners for LBRs. Add new column 'ListenerName' in the CD3 sheet. Please refer to CD3-template.xlsx under example folder for sample input data. Support for Multiple export options for FSS. Please refer to CD3-template.xlsx under example folder for sample input data. Support for NSG export/import. Export process for non-greenfield tenancies will support export of NSGs and their import into terraform. GIT repo has been moved to OCI. SSH key needs to be setup for access to the repo. Private key is copied over to /root/.ssh folder. It is up to the developers if they want to keep the private key there for any future GIT updates or if they want to remove the key for security reasons. Release v6.0.1 Date - Mar 23, 2020 There was a bug in v6.0 where TF for Instances, FSS, LBR etc was not getting correct subnet name as created for subnets using NEtworking. It has been corrected and pushed to the master branch. Major Release v6.0 Below are the highlights of this release: Support for Non Green Field Tenancies. Removed common_seclist_name and seclist_per_subnet columns from Subnets Tab. Specify security lists to be created for a subnet as comma separated in seclist_names column. If DNS doesn't need to be enabled for a VCN or subnet, specify 'n' in dns_label column for that VCN or Subnet. Specify 'n' for route_table_name or seclist_names in Subnets tab if only Default Route Table or Default Secuirty List of VCN needs to be attached to the subnet. When you are running Modify Network, if there are any route tables or security lists which are not attached to any subnet or DRG or LPG then it will display the names in output like below: ATTENTION!!! Below RouteTables are not attached to any subnet or DRG and LPG; If you want to delete any of them, remove the TF file!!! ATTENTION!!! Below SecLists are not attached to any subnet; If you want to delete any of them, remove the TF file!!! Release v5.0.1 There was a bug in LPGs creation/peering. Corrected that and pushed as v5.0.1 Major Release v5.0 Date - Feb 7, 2020 It has many new enhancements and features added to it. Detailed explanation about CD3 excel is at: CD3 Excel release v5.0 Below are the highlights: yum utility won't break on OCS Work VM. Please use python setUpOCI.py cmd and python fetch_compartments_to_variablesTF.py cmd to execute automation. Export of rules after network creation is a mandatory step. Single sheet- 'SecRulesinOCI' and 'RouteRulesinOCI' would be used to manage rules in OCI. Color Coding has been added to the exported rules. Support for specifying LPG names has been included. Format to specify LPG names: specify either y (like for other components) - this will give default name to the LPG whch is _lpg eg ProdVCN_lpg0 or the name that you want to give to the LPG. Peering section has been removed and merged in VCNs tab. Format for specifying peering in hub_spoke_peer_none column: specify hub in the column for the VCN you want to mark as hub specify spoke: if you want to mark a VCN as spoke to hub VCN specify peer: if you want to establish normal peering between 2 VCNs specify none if the VCN is a normal standalone VCN you can specify SGW target for route rules in OCI. specify as either object_storage or all_services When VCNs are specified in hub-spoke model, Route Tables associated with DRG and LPG get created automatically. Inter subnet communication and egress communication from all subnets is opened via SecRules. Initial Subnet Route rules are controlled by flags for each target in Subnets Tab. If any change is required to be done in default sec rules or route rules, they can be modified via cd3 after exporting them. CSV support for this version is still under progress. Major Release v4.0 Note This version would require you to change your excel file and use the latest one since there is a column addition in the existing sheet. Added support to add a common security List across subnets apart from just Default Security List. This is done by adding a new column in Subnets tab \"common_seclist_name\" which specifies name of common seclist to be created and used for each subnet If left blank for a particular subnet that means the common seclist doesnt not need to be assigned to that subnet. Modified output files created for routes. Earlier tool used to create one TF file for all route tables. Now it would generate separate file for each Route Table like it does for Security List. Introduced option to create new VCN under Update Network Added Default DHCP options also to TF like for Default Security List Added support to include Description for a rule in NSGs. Added new column for this Modified DB Systems creation code. Separated tabs for DB system - VM, BM and Exa Fixed some minor issues with existing code","title":"ReleaseInfo"},{"location":"ReleaseInfo/#release-info","text":"","title":"Release-Info"},{"location":"ReleaseInfo/#automation-toolkit-release-v10-docker-image-release-v60","text":"","title":"Automation Toolkit Release v10 &amp; Docker Image Release v6.0"},{"location":"ReleaseInfo/#date-jan-13th-2023","text":"This is a major release with below updates: Support for new services - OKE and SCH. New tab for 'OKE' is included in CD3-CIS-template.xlsx. New tab for 'ServiceConnectors' is added to CD3-CIS-ManagementServices-template.xlsx. Added the script to fetch regions subscribed to the tenancy. This will be executed automatically every time setUpOCI is executed. Introduced a new option in setUpOCI menu called 'CD3 Services' to execute 'Fetch Compartments' and 'Fetch Protocols Scripts. Modified the setUpOCI workflow to prompt the user to execute 'Fetch Compartments' script in case it has not been executed previously. Bug fixes wrt Instances, DB Systems","title":"Date - Jan 13th, 2023"},{"location":"ReleaseInfo/#automation-toolkit-release-v921-docker-image-release-v521","text":"","title":"Automation Toolkit Release v9.2.1 &amp; Docker Image Release v5.2.1"},{"location":"ReleaseInfo/#date-nov-30th-2022","text":"This is a minor release with below updates: Sample terraform import command included as part of output tfvars file for each OCI resource managed by Toolkit. Split Export of Network options to chose export of different components separately eg Major Objects, Subnets, NSGs etc. Include support for Marketplace Images for Instances. Few bug fixes/enhancements wrt export of Instances/NSGs, making null values for NSGs/Instances optional in tfvars","title":"Date - Nov 30th, 2022"},{"location":"ReleaseInfo/#previous-versions-released-before-making-it-available-on-github","text":"","title":"Previous Versions released before making it available on GitHub"},{"location":"ReleaseInfo/#automation-toolkit-release-v92-docker-image-release-v52","text":"","title":"Automation Toolkit Release v9.2 &amp; Docker Image Release v5.2"},{"location":"ReleaseInfo/#date-oct-10th-2022","text":"This is a major release with existing services converted into terraform modules and also bug fixes. Terraform modules for FSS and ADB(Modified the input sheet for ADB to include more features) Included new service - Network Load Balancers Enhanced Tags sheet to include Default Tags for Multiple Compartments. Enhanced CD3 Validator for FSS, NSGs column for each tab. Included CIS compliance checker script as part of setUpOCI Menu option Cleanup of variables_ .tf file Updated CD3 templates in example folder with latest CIS data Bug fixes wrt multiple services like Instances, Notifications etc Introduced documentation folder containing terraform and toolkit user guide in outdir of each customer","title":"Date - Oct 10th, 2022"},{"location":"ReleaseInfo/#automation-toolkit-release-v91-docker-image-release-v51","text":"","title":"Automation Toolkit Release v9.1 &amp; Docker Image Release v5.1"},{"location":"ReleaseInfo/#date-jun-13th-2022","text":"This is a major release with existing services converted into terraform modules and also bug fixes. Terraform Modules for Instances, Block Volumes, Tags, CIS features, LBaas. Introduced new columns for PV encryption in Instances/Block Volumes. Introduced new columns for Min/Max bandwidth for flexible shapes load balancers, reserved public IP. Support for OCI certificate management certificates for Listeners, BackendSets. Removed support for subnet_name_attach_cidr parameter from CD3 excel's 'VCN Info' sheet. Bug fixes","title":"Date - Jun 13th, 2022"},{"location":"ReleaseInfo/#automation-toolkit-release-v902-docker-image-release-v502","text":"","title":"Automation Toolkit Release v9.0.2 &amp; Docker Image Release v5.0.2"},{"location":"ReleaseInfo/#date-april-29-2022","text":"This is a minor release with bug fixes related to Networking and Identity Policies.","title":"Date - April 29, 2022"},{"location":"ReleaseInfo/#automation-toolkit-release-v901-docker-image-release-v501","text":"","title":"Automation Toolkit Release v9.0.1 &amp; Docker Image Release v5.0.1"},{"location":"ReleaseInfo/#date-april-9-2022","text":"This is a minor release. Bug fix for data after END tag in DRGRouteRulesinOCI sheet. Bug fix for tenancies having both DRGv1 and DRGv2 Bug fix for VCN Flow Log output Bug fix for NSG ICMP rules not having only ICMP type Modified output template files to adjust the spacing","title":"Date - April 9, 2022"},{"location":"ReleaseInfo/#automation-toolkit-release-v90-docker-image-release-v50","text":"","title":"Automation Toolkit Release v9.0 &amp; Docker Image Release v5.0"},{"location":"ReleaseInfo/#date-march-21-2022","text":"This is a major release. Terraform output files in modules format for IAM, Network, Database(DBSystems and Exa) and Management Services(Events, Notifications) components. Added support for Alarms with output files as terraform modules. Updated the excel sheet templates as per latest CIS compliance for IAM compartments, groups, policies, events, notifications and alarms. Added support for multiple VCN CIDRs in VCNs sheet. Added support for same VCN names across regions. Added export for Dedicated VM Hosts and Database tabs as terraform flat files Modified Database tabs to include new features. Restructured the code directories and setUpOCI menu options. Added drop downs in the excel sheet columns to make excel filling easier. Updated OCI_regions to include all regions Deprecation of OCSWorkVM.","title":"Date - March 21, 2022"},{"location":"ReleaseInfo/#automation-toolkit-release-v803-docker-image-release-v403","text":"","title":"Automation Toolkit Release v8.0.3 &amp; Docker Image Release v4.0.3"},{"location":"ReleaseInfo/#date-nov-26-2021","text":"This is a minor release. Bug fix for Availability Domain values while export of block volumes, FSS Bug fix for DRG Route Rules export error - 'Too Many requests' Bug fix for export of Tags having spaces in the values","title":"Date - Nov 26 , 2021"},{"location":"ReleaseInfo/#automation-toolkit-release-v802-docker-image-release-v402","text":"","title":"Automation Toolkit Release v8.0.2 &amp; Docker Image Release v4.0.2"},{"location":"ReleaseInfo/#date-sep-30-2021","text":"This is a minor release. Bug fix for End Tag in NSGs tab Bug fix for export of LBR hosted in two subnets in different compartments. Bug fix for terraform variable name for route table names Allow case insensitive for Security Rule Types/Protocols Allow flexible shapes in LBR CD3","title":"Date - Sep 30 , 2021"},{"location":"ReleaseInfo/#automation-toolkit-release-v80-docker-image-release-v40","text":"","title":"Automation Toolkit Release v8.0 &amp; Docker Image Release v4.0"},{"location":"ReleaseInfo/#date-jul-27-2021","text":"This is a major release. Support for DRGv2 - added 2 new sheets to CD3: DRGs and DRGRouteRulesinOCI Backward compatible to support DRGv1 Updated CD3 Validator to include validation for DRGs tab Optimized the code for export of objects Bug fix for export of SecRules and RouteRules for all compartments Updated the toolkit to support user access to a single compartment by allowing creation of sub-compartments under that only. Included export of additional objects for Instances and Block Volumes CD3 templates are compliant to latest CIS Landing Zone Upgrade terraform version to 1.0.0 Please note that since this release is upgrading the terraform version so previous version's terraform state will not be compatible with the new tf files. Recommendation is to keep using old code setup for eixsting customers and new code setup for new customers. Or else export everything using new code and then import into the new terraform state","title":"Date - Jul 27 , 2021"},{"location":"ReleaseInfo/#automation-toolkit-release-v72-docker-image-release-v32","text":"","title":"Automation Toolkit Release v7.2 &amp; Docker Image Release v3.2"},{"location":"ReleaseInfo/#date-may-26-2021","text":"This is a minor release. Bug fix for export of policies having newline in description eg for policies added automatically for streaming Launch Linux 7.9 as OCS VM since 7.8 is not searcheable now and enable yum repos Change os.cmd to function calls for SetUPOCI Include CIS Features to enable cloud-guard, OSS, VCN Flow Logging CD3 Validator for Identity, Networking, Instances, Block Volumes Accept key value along with key var name in Instances Sheet Updated CD3 Templates as per CIS","title":"Date - May 26, 2021"},{"location":"ReleaseInfo/#release-v712","text":"","title":"Release v7.1.2"},{"location":"ReleaseInfo/#date-apr-12-2021","text":"This is a minor release. Bug fix for CD3 LBR - Certs/PEM keys copied to outdir- this helps to resolve the path issue while RM upload. Export LBR also modified Bug fix for Instance Export - included root compartment, AD issue and Boot Volume not found issue. Removed installation of Development Tools from shell script on OCSVM. Added CD3 validation for DNS Label length for VCN and Subnets","title":"Date - Apr 12, 2021"},{"location":"ReleaseInfo/#release-v711","text":"","title":"Release v7.1.1"},{"location":"ReleaseInfo/#this-is-a-minor-release","text":"Bug fix for CD3 Network components validator - included check for invalid CIDR range having host bits set Bug fix for Security List Rules - allow all ports for TCP/UDP Removed unwanted packages from shell script - cfgparse, ipaddr, pycrypto, gcc","title":"This is a minor release."},{"location":"ReleaseInfo/#release-v71","text":"Date - Feb 12, 2021 Below are the highlights of this release: Introduced new option in setUpOCI Menu to create RM Stack * When this option is chosen, it will ask for the compartment where the RM stack has to be created. * It will create stacks in the specified compartment in the home region * RM Stack names: ocswork- - where is the prefix mentioned in setUpOCI.properties file and is the regions tenancy is subscribed to. * Uploads all files in outdir to RM Stack and also uploads the tfstate file if existing. * Uses same RM Stack for multiple executions. Bug fix for LBR Backend sets to allow same backend servers with different ports. OCSWork VM launched with TF version 0.13.4 in sync with Resource Manager in OCI CD3 templates as per CIS Standards","title":"Release v7.1"},{"location":"ReleaseInfo/#release-v701","text":"This is a minor release. xrld package's latest release was not compatible and giving below issue with CD3: It has been fixed by installing lower version of xlrd package. pip3 install xlrd==1.2.0 It has been corrected and pushed to the master branch.","title":"Release v7.0.1"},{"location":"ReleaseInfo/#major-release-v70","text":"","title":"Major Release v7.0"},{"location":"ReleaseInfo/#date-oct-9-2020","text":"Support for additional properties for OCI objects using Jinja2 templates Support for configuring Events and Notifications Support for export of Instances, block volumes, Tags, Events and Notifications etc to CD3 Updated Terraform Configuration Files to support the Latest Terraform Version Support for Resource Manager Support to create and export Dynamic Groups Support to create and export Cost Tracking and Default Tags Support to create and export LBR Components- Cipher Suites, Rule Set and Path Route Set Support to attach or export 'Custom Backup Policy Attachments' to Block and Boot Volumes","title":"Date - Oct 9, 2020"},{"location":"ReleaseInfo/#release-v611","text":"creatOCSWork.py picks up latest Linux OCID and launches the OCSWork VM. However Linux 8 does not support many packages required by automation toolkit. Hence modified the code to launch Linux 7.8 incase ocs_vm_source_image_ocid is left empty in ocswork.properties.","title":"Release v6.1.1"},{"location":"ReleaseInfo/#release-v61","text":"","title":"Release v6.1"},{"location":"ReleaseInfo/#date-july-31-2020","text":"Below are the highlights of this release: Addition of Description field for Security Rules and Route Rules. Keep using same CD3 but just add new column 'RuleDescription' at the end of both the sheets - SecRulesinOCI and RouteRulesinOCI New text files - OCI_Regions and OCI_Protocols have been introduced. If any new region gets supported by OCI, it can be added in OCI_Regions file. Similarly Protocol and its number mapping has been defined in OCI_Protocols file which will be used by Security Rules as well as NSG Rules. Automation Toolkit will now support duplicate compartment names like OCI does. Please refer to CD3-template.xlsx under example folder for sample data. Extra properties specific to OCItoOCI project have been removed from ocswork.properties and a new file ocswork_ocic.properties has been added to accomodate that. Support for multiple OCSWork VMs via separate config_for_delete files. A new input parameter has been added to ocswork.properties file. Support for Reserved Public IP for OCSWork VM. Reserved public IP will be assigned to OCSWork VM which you cna chose to retain also while destroying OCSWork VM. a. Regions property has been removed and now tenancy's subscribed regions will be fetched using API and terraform directories would be created based on that. It would be good to subscribe tenancy to all required regions before setting up OCS Work VM or else create the region directory manually. b. Regions property has been removed from VCN Info tab of CD3 as well. CD3 Validator has been introduced. This will validate Networking tabs as of now. It will check for any Null Values, CIDR overlaps etc. Support for Flex shapes for Instances. Please refer to CD3-template.xlsx under example folder for sample input data. Instead of LinuxLatest and WindowsLatest, OS value in CD3 template has been changed to Linux and Windows respectively. Variable names in variables_ .tf has been changed accordingly. Support for LinuxLatest and WindowsLatest templates for instance will be deprecated from next release. Support for Multiple Listeners for LBRs. Add new column 'ListenerName' in the CD3 sheet. Please refer to CD3-template.xlsx under example folder for sample input data. Support for Multiple export options for FSS. Please refer to CD3-template.xlsx under example folder for sample input data. Support for NSG export/import. Export process for non-greenfield tenancies will support export of NSGs and their import into terraform. GIT repo has been moved to OCI. SSH key needs to be setup for access to the repo. Private key is copied over to /root/.ssh folder. It is up to the developers if they want to keep the private key there for any future GIT updates or if they want to remove the key for security reasons.","title":"Date - July 31, 2020"},{"location":"ReleaseInfo/#release-v601","text":"","title":"Release v6.0.1"},{"location":"ReleaseInfo/#date-mar-23-2020","text":"There was a bug in v6.0 where TF for Instances, FSS, LBR etc was not getting correct subnet name as created for subnets using NEtworking. It has been corrected and pushed to the master branch.","title":"Date - Mar 23, 2020"},{"location":"ReleaseInfo/#major-release-v60","text":"Below are the highlights of this release: Support for Non Green Field Tenancies. Removed common_seclist_name and seclist_per_subnet columns from Subnets Tab. Specify security lists to be created for a subnet as comma separated in seclist_names column. If DNS doesn't need to be enabled for a VCN or subnet, specify 'n' in dns_label column for that VCN or Subnet. Specify 'n' for route_table_name or seclist_names in Subnets tab if only Default Route Table or Default Secuirty List of VCN needs to be attached to the subnet. When you are running Modify Network, if there are any route tables or security lists which are not attached to any subnet or DRG or LPG then it will display the names in output like below: ATTENTION!!! Below RouteTables are not attached to any subnet or DRG and LPG; If you want to delete any of them, remove the TF file!!! ATTENTION!!! Below SecLists are not attached to any subnet; If you want to delete any of them, remove the TF file!!!","title":"Major Release v6.0"},{"location":"ReleaseInfo/#release-v501","text":"There was a bug in LPGs creation/peering. Corrected that and pushed as v5.0.1","title":"Release v5.0.1"},{"location":"ReleaseInfo/#major-release-v50","text":"","title":"Major Release v5.0"},{"location":"ReleaseInfo/#date-feb-7-2020","text":"It has many new enhancements and features added to it. Detailed explanation about CD3 excel is at: CD3 Excel release v5.0 Below are the highlights: yum utility won't break on OCS Work VM. Please use python setUpOCI.py cmd and python fetch_compartments_to_variablesTF.py cmd to execute automation. Export of rules after network creation is a mandatory step. Single sheet- 'SecRulesinOCI' and 'RouteRulesinOCI' would be used to manage rules in OCI. Color Coding has been added to the exported rules. Support for specifying LPG names has been included. Format to specify LPG names: specify either y (like for other components) - this will give default name to the LPG whch is _lpg eg ProdVCN_lpg0 or the name that you want to give to the LPG. Peering section has been removed and merged in VCNs tab. Format for specifying peering in hub_spoke_peer_none column: specify hub in the column for the VCN you want to mark as hub specify spoke: if you want to mark a VCN as spoke to hub VCN specify peer: if you want to establish normal peering between 2 VCNs specify none if the VCN is a normal standalone VCN you can specify SGW target for route rules in OCI. specify as either object_storage or all_services When VCNs are specified in hub-spoke model, Route Tables associated with DRG and LPG get created automatically. Inter subnet communication and egress communication from all subnets is opened via SecRules. Initial Subnet Route rules are controlled by flags for each target in Subnets Tab. If any change is required to be done in default sec rules or route rules, they can be modified via cd3 after exporting them. CSV support for this version is still under progress.","title":"Date - Feb 7, 2020"},{"location":"ReleaseInfo/#major-release-v40","text":"Note This version would require you to change your excel file and use the latest one since there is a column addition in the existing sheet. Added support to add a common security List across subnets apart from just Default Security List. This is done by adding a new column in Subnets tab \"common_seclist_name\" which specifies name of common seclist to be created and used for each subnet If left blank for a particular subnet that means the common seclist doesnt not need to be assigned to that subnet. Modified output files created for routes. Earlier tool used to create one TF file for all route tables. Now it would generate separate file for each Route Table like it does for Security List. Introduced option to create new VCN under Update Network Added Default DHCP options also to TF like for Default Security List Added support to include Description for a rule in NSGs. Added new column for this Modified DB Systems creation code. Separated tabs for DB system - VM, BM and Exa Fixed some minor issues with existing code","title":"Major Release v4.0"},{"location":"Workflows/","text":"Using the Automation Toolkit via CLI Prepare setUpOCI.properties Current Version: setUpOCI.properties v2024.1.0 Make sure to use/modify the properties file at /cd3user/tenancies / / _setUpOCI.properties during executions. [Default] #Input variables required to run setUpOCI script #path to output directory where terraform file will be generated. eg /cd3user/tenancies/<customer_name>/terraform_files outdir= #prefix for output terraform files eg <customer_name> like demotenancy prefix= # auth mechanism for OCI APIs - api_key,instance_principal,session_token auth_mechanism= #input config file for Python API communication with OCI eg /cd3user/tenancies/<customer_name>/.config_files/<customer_name>_config; config_file= # Leave it blank if you want single outdir or specify outdir_structure_file.properties containing directory structure for OCI services. outdir_structure_file= #path to cd3 excel eg /cd3user/tenancies/<customer_name>\\CD3-Customer.xlsx cd3file= #specify create_resources to create new resources in OCI(greenfield workflow) #specify export_resources to export resources from OCI(non-greenfield workflow) workflow_type=create_resources Variable Description Example outdir Path to output directory where terraform files will be generated /cd3user/tenancies/ /terraform_files prefix Prefix for output terraform files \\ auth_mechanism Authentication Mechanism for OCI APIs api_key config_file Python config file /cd3user/tenancies/ /.config_files/ _config outdir_structure_file Parameter specifying single outdir or different for different services Blank or _outdir_structure_file.properties cd3file Path to the Excel input file /cd3user/tenancies/ /testCD3. xlsx workflow_type greenfield workflow or non-greenfield workflow See Automation Toolkit Workflows for more information Automation Toolkit Workflows: CD3 Automation Tool Kit supports 2 main workflows: 1. Create Resources in OCI (Greenfield Workflow) - Empty OCI tenancy (or) do not need to modify / use any existing resources. 2. Export Resources from OCI (Non-Greenfield Workflow) - Need to use / manage existing resources. Export existing resources into CD3 & TF State, then use the Greenfield workflow. Execution Steps Overview: Choose the appropriate CD3 Excel Sheet and update the setUpOCI.properties file at /cd3user/tenancies/ / _setUpOCI.properties and run the commands below: Step 1 : Change Directory to 'cd3_automation_toolkit' cd /cd3user/oci_tools/cd3_automation_toolkit/ Step 2 : Place Excel sheet at appropriate location in your container and provide the corresponding path in cd3file parmeter of: /cd3user/tenancies / / _setUpOCI.properties file Step 3 Execute the setUpOCI Script: python setUpOCI.py /cd3user/tenancies/<customer_name>/<customer_name>_setUpOCI.properties \u2192 Example execution of the script: [cd3user@25260a87b137 cd3_automation_toolkit]$ python setUpOCI.py /cd3user/tenancies/demotenancy/demotenancy_setUpOCI.properties Updated OCI_Regions file !!! Script to fetch the compartment OCIDs into variables file has not been executed. Do you want to run it now? (y|n): \u2192 This prompt appears for the very first time when you run the toolkit or when any new compartments are created using the toolkit. Enter 'y' to fetch the details of compartment OCIDs into variables file. \u2192 After fetching the compartment details, the toolkit will display the menu options. | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Before you Begin"},{"location":"Workflows/#using-the-automation-toolkit-via-cli","text":"","title":"Using the Automation Toolkit via CLI"},{"location":"Workflows/#prepare-setupociproperties","text":"Current Version: setUpOCI.properties v2024.1.0 Make sure to use/modify the properties file at /cd3user/tenancies / / _setUpOCI.properties during executions. [Default] #Input variables required to run setUpOCI script #path to output directory where terraform file will be generated. eg /cd3user/tenancies/<customer_name>/terraform_files outdir= #prefix for output terraform files eg <customer_name> like demotenancy prefix= # auth mechanism for OCI APIs - api_key,instance_principal,session_token auth_mechanism= #input config file for Python API communication with OCI eg /cd3user/tenancies/<customer_name>/.config_files/<customer_name>_config; config_file= # Leave it blank if you want single outdir or specify outdir_structure_file.properties containing directory structure for OCI services. outdir_structure_file= #path to cd3 excel eg /cd3user/tenancies/<customer_name>\\CD3-Customer.xlsx cd3file= #specify create_resources to create new resources in OCI(greenfield workflow) #specify export_resources to export resources from OCI(non-greenfield workflow) workflow_type=create_resources Variable Description Example outdir Path to output directory where terraform files will be generated /cd3user/tenancies/ /terraform_files prefix Prefix for output terraform files \\ auth_mechanism Authentication Mechanism for OCI APIs api_key config_file Python config file /cd3user/tenancies/ /.config_files/ _config outdir_structure_file Parameter specifying single outdir or different for different services Blank or _outdir_structure_file.properties cd3file Path to the Excel input file /cd3user/tenancies/ /testCD3. xlsx workflow_type greenfield workflow or non-greenfield workflow See Automation Toolkit Workflows for more information","title":"Prepare setUpOCI.properties"},{"location":"Workflows/#automation-toolkit-workflows","text":"CD3 Automation Tool Kit supports 2 main workflows: 1. Create Resources in OCI (Greenfield Workflow) - Empty OCI tenancy (or) do not need to modify / use any existing resources. 2. Export Resources from OCI (Non-Greenfield Workflow) - Need to use / manage existing resources. Export existing resources into CD3 & TF State, then use the Greenfield workflow.","title":"Automation Toolkit Workflows:"},{"location":"Workflows/#execution-steps-overview","text":"Choose the appropriate CD3 Excel Sheet and update the setUpOCI.properties file at /cd3user/tenancies/ / _setUpOCI.properties and run the commands below: Step 1 : Change Directory to 'cd3_automation_toolkit' cd /cd3user/oci_tools/cd3_automation_toolkit/ Step 2 : Place Excel sheet at appropriate location in your container and provide the corresponding path in cd3file parmeter of: /cd3user/tenancies / / _setUpOCI.properties file Step 3 Execute the setUpOCI Script: python setUpOCI.py /cd3user/tenancies/<customer_name>/<customer_name>_setUpOCI.properties \u2192 Example execution of the script: [cd3user@25260a87b137 cd3_automation_toolkit]$ python setUpOCI.py /cd3user/tenancies/demotenancy/demotenancy_setUpOCI.properties Updated OCI_Regions file !!! Script to fetch the compartment OCIDs into variables file has not been executed. Do you want to run it now? (y|n): \u2192 This prompt appears for the very first time when you run the toolkit or when any new compartments are created using the toolkit. Enter 'y' to fetch the details of compartment OCIDs into variables file. \u2192 After fetching the compartment details, the toolkit will display the menu options. | :arrow_backward: Prev | Next :arrow_forward: | | :---- | -------: |","title":"Execution Steps Overview:"},{"location":"prerequisites/","text":"Prerequisites Git Any docker CLI compatible platform such as Docker or Rancher. See How to Install and Configure Rancher Desktop Part 2 for reference. Local Directory - A directory in your local system that will be shared with the container to hold the generated Terraform files. OCI Tenancy Access Requirement - Appropriate IAM policies must be in place for each of the resources that the user may try to create. Minimum requirement for the user to get started is to have the ability to read to the tenancy. | :arrow_backward: Main Menu | Next :arrow_forward: | | :---- | -------: |","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"Git Any docker CLI compatible platform such as Docker or Rancher. See How to Install and Configure Rancher Desktop Part 2 for reference. Local Directory - A directory in your local system that will be shared with the container to hold the generated Terraform files. OCI Tenancy Access Requirement - Appropriate IAM policies must be in place for each of the resources that the user may try to create. Minimum requirement for the user to get started is to have the ability to read to the tenancy. | :arrow_backward: Main Menu | Next :arrow_forward: | | :---- | -------: |","title":"Prerequisites"}]}